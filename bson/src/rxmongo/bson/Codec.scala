/*
 * Copyright © 2015 Reactific Software LLC. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package rxmongo.bson

import akka.util.{ ByteString, ByteStringBuilder, ByteIterator }

import java.util.Date
import java.util.regex.Pattern

import scala.util.{ Failure, Success, Try }

/** Encoder from T to ByteString
  *
  * RxMongo uses Encoder[T] implicit objects to translate the various case classes that represents Mongo documents
  * info the corresponding ByteString so they can be transmitted to Mongo. RxMongo users can also implement this trait
  * as an implicit object so that their types, T, can be converted into ByteString that can be similarly sent to Mongo.
  * Alternatively, Encoder instances can be generated by the RxMongo macros which makes using the Encoder with case
  * classes as simple as a one line declaration of an implicit value.
  *
  * An Encoder should only create whole BSON documents which means either an object or an array. For smaller bson types,
  * utilize the methods of the ByteStringBuilderPimp class.
  *
  * @tparam T The type from which this Encoder encodes
  */

trait Encoder[T] {

  /** Indicate the TypeCode of T
    * To accurately construct sequences of objects using this Encoder, the basic BSON type for T must be known.
    * Usually, the default value, ObjectCode, is appropriate for user defined case classes but if T is any of the
    * other types of BSON values, the encoder should provide the typeCode here.
    */
  val code : TypeCode = ObjectCode

  /** Extract the name of the TypeCode
    *
    * @return The name of the BSON Type for this encoder.
    */
  def typeName : String = code.toString

  /** A hint about the number of bytes that might be placed into the ByteString (default=512) */
  val sizeHint : Int = 512

  /** Add value T to a ByteStringBuilder
    *
    * @param value The value, T, to be written to the builder
    * @param builder The ByteStringBuilder to which the value of type T should be written
    * @return The ByteStringBuilder
    */
  def write(value : T, builder : ByteStringBuilder) : ByteStringBuilder

  /** Convert T into ByteString
    * This is a convenience to avoid having to create a ByteStringBuilder and pass it to the other write function.
    * Instead a builder is created and sized as specified for the intended object (default 512). The value is then
    * written using the other write overload and the ByteString is extracted from the builder.
    * @param value The value to be written to the ByteString
    * @return A ByteString that corresponds to the value T written as BSON bytes.
    */
  def write(value : T) : ByteString = {
    val bsb = ByteString.newBuilder
    bsb.sizeHint(sizeHint)
    write(value, bsb).toByteString
  }

  /** Convenience method to get an Option[BSONValue]
    *
    * @param value The value, T, to write to BSON
    * @return None if T cannot be written, Some[BSONValue] otherwise
    */
  def writeOption(value : T) : Option[ByteString] = Try {
    Option(write(value))
  } match {
    case Success(x) ⇒ x
    case Failure(x) ⇒ None
  }

  /** Write In A Try Block.
    * Performs the write operation in a Try block so exceptions are caught and returned in the Try[ByteString] result.
    * @param value The value of type T that should be written to ByteString
    * @return A Try[ByteString] containing either the written ByteString or the exception that occurred
    */
  def tryWrite(value : T) : Try[ByteString] = Try { write(value) }
}

/** Decoder from ByteIterator to T
  *
  * RxMongo uses Decoder[T] implicit objects to translate the ByteString streams returning from Mongo into the
  * various case classes that represents Mongo documents. RxMongo users can also implement this trait
  * as an implicit object so that their types, T, can be converted from ByteString received from Mongo.
  * Alternatively, Decoder instances can be generated by the RxMongo macros which makes using the Decoder with case
  * classes as simple as a one line declaration of an implicit value.
  *
  * An Decoder should only interpret whole BSON documents which means either an object or an array. For smaller bson
  * types, utilize the methods of the ByteIteratorPimp class.
  *
  * @tparam T The type from which this Encoder encodes
  */
trait Decoder[T] {
  /** Convert ByteIterator Into T
    *
    * @param itr The ByteIterator from which the value for T is read
    * @return A T that results from reading T from the ByteIterator
    */
  def read(itr : ByteIterator) : T

  /** Convenience method to get an Option[T]
    * @param itr BSONValue to be converted to T
    * @return None if the value cannot be read, Some[T] otherwise
    */
  def readOption(itr : ByteIterator) : Option[T] = Try {
    Option(read(itr))
  } match {
    case Success(x) ⇒ x
    case Failure(x) ⇒ None
  }

  /** Read In a Try Block.
    * Performs the read operation in a Try block so exceptions are caught and returned in the Try
    * @param itr The ByteIterator to read from
    * @return A Try[T] containing either the read T value or the exception that occurred
    */
  def tryRead(itr : ByteIterator) : Try[T] = Try { read(itr) }
}

/** Coder/Decoder (Codec) between type T and BSON Binary format
  *
  * The Codec trait simply combines the Encoder[T] with the Decoder[T] so that a single implicit object can be
  * declared that handles both encoding and decoding of T.
  *
  * @tparam T The type from which this Codec encodes and to which it decodes
  */
trait Codec[T] extends Decoder[T] with Encoder[T]

object Codec {

  implicit object DoubleCodec extends Codec[Double] {
    override val code = DoubleCode
    def read(itr : ByteIterator) : Double = itr.getDouble
    def write(value : Double, bldr : ByteStringBuilder) : ByteStringBuilder = bldr.putDouble(value)
  }

  implicit object StringCodec extends Codec[String] {
    override val code = StringCode
    def read(itr : ByteIterator) : String = itr.getStr
    def write(value : String, bldr : ByteStringBuilder) : ByteStringBuilder = bldr.putStr(value)
  }

  implicit object BSONObjectCodec extends Codec[BSONObject] {
    def read(itr : ByteIterator) : BSONObject = { itr.getObject }
    def write(value : BSONObject, builder : ByteStringBuilder) : ByteStringBuilder = { builder.putObject(value); builder }
  }

  implicit object BSONArrayCodec extends Codec[BSONArray] {
    override val code = ArrayCode
    def read(itr : ByteIterator) : BSONArray = { itr.getArray }
    def write(value : BSONArray, builder : ByteStringBuilder) : ByteStringBuilder = { builder.putArray(value); builder }
  }

  implicit object BinaryCodec extends Codec[(BinarySubtype, Array[Byte])] {
    override val code = BinaryCode
    def read(itr : ByteIterator) : (BinarySubtype, Array[Byte]) = itr.getBinary
    def write(value : (BinarySubtype, Array[Byte]), bldr : ByteStringBuilder) : ByteStringBuilder = {
      bldr.putBinary(value._1, value._2)
    }
  }

  implicit object ObjectIDCodec extends Codec[Array[Byte]] {
    override val code = ObjectIDCode
    def read(itr : ByteIterator) : Array[Byte] = itr.getObjectID
    def write(value : Array[Byte], bldr : ByteStringBuilder) : ByteStringBuilder = bldr.putObjectID(value)
  }

  implicit object BooleanCodec extends Codec[Boolean] {
    override val code = BooleanCode
    def read(itr : ByteIterator) : Boolean = itr.getBoolean
    def write(value : Boolean, bldr : ByteStringBuilder) : ByteStringBuilder = bldr.putBoolean(value)
  }

  implicit object DateCodec extends Codec[Date] {
    override val code = DateCode
    def read(itr : ByteIterator) : Date = new Date(itr.getLong)
    def write(value : Date, bldr : ByteStringBuilder) : ByteStringBuilder = bldr.putLong(value.getTime)
  }

  implicit object RegexCodec extends Codec[Pattern] {
    override val code = RegexCode
    def read(itr : ByteIterator) : Pattern = itr.getRegex
    def write(value : Pattern, bldr : ByteStringBuilder) : ByteStringBuilder = bldr.putRegex(value)
  }

  implicit object DBPointerCodec extends Codec[(String, Array[Byte])] {
    override val code = DBPointerCode
    def read(itr : ByteIterator) : (String, Array[Byte]) = itr.getDBPointer
    def write(value : (String, Array[Byte]), bldr : ByteStringBuilder) : ByteStringBuilder = {
      bldr.putDBPointer(value._1, value._2)
    }
  }

  implicit object JavaScriptCodec extends Codec[String] {
    override val code = JavaScriptCode
    def read(itr : ByteIterator) : String = itr.getStr
    def write(value : String, bldr : ByteStringBuilder) : ByteStringBuilder = bldr.putStr(value)
  }

  implicit object SymbolCodec extends Codec[String] {
    override val code = SymbolCode
    def read(itr : ByteIterator) : String = itr.getStr
    def write(value : String, bldr : ByteStringBuilder) : ByteStringBuilder = bldr.putStr(value)
  }

  implicit object ScopedJavaScriptCodec extends Codec[(String, BSONObject)] {
    def read(itr : ByteIterator) : (String, BSONObject) = itr.getScopedJavaScript
    def write(value : (String, BSONObject), builder : ByteStringBuilder) : ByteStringBuilder = {
      builder.putScopedJavaScript(value._1, value._2)
    }
  }

  implicit object IntCodec extends Codec[Int] {
    override val code = IntegerCode
    def read(itr : ByteIterator) : Int = itr.getInt
    def write(value : Int, bldr : ByteStringBuilder) : ByteStringBuilder = bldr.putInt(value)
  }

  implicit object TimestampCodec extends Codec[Long] {
    override val code = TimestampCode
    def read(itr : ByteIterator) : Long = itr.getLong
    def write(value : Long, bldr : ByteStringBuilder) : ByteStringBuilder = bldr.putLong(value)
  }

  implicit object LongCodec extends Codec[Long] {
    override val code = LongCode
    def read(itr : ByteIterator) : Long = itr.getLong
    def write(value : Long, bldr : ByteStringBuilder) : ByteStringBuilder = bldr.putLong(value)
  }

  implicit object ByteStringCodec extends Codec[ByteString] {
    override val code : TypeCode = ObjectCode
    def read(itr : ByteIterator) : ByteString = itr.toByteString
    def write(value : ByteString, bldr : ByteStringBuilder) : ByteStringBuilder = bldr ++= value
  }
}
